##############################################
# Seemingly useful Ubuntu defaults are below #
##############################################
# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
# Fixes ugly line wrapping.
shopt -s checkwinsize

# ** matches all files, dirs and subdirs, **/ matches dirs and subdirs, but not files
shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

##############################
# My old config starts below #
##############################

# Os X days start here
stty -ixon
# Black-and-white prompt
# export PS1='[\u:\w]\$ '
# Colored prompt (slightly modified default Ubuntu one)
PS1='[${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]]\$ '
export GOPATH="$HOME/derp/go"
shopt -s extglob
export HISTSIZE=50000
unset HISTFILESIZE
PATH="$HOME/.local/bin:/usr/local/bin:/Library/Developer/CommandLineTools/usr/bin:$PATH:$HOME/usr/bin"
PATH="$PATH:/home/undercat/derp/pycharm-community-2020.3.2/bin" # PyCharm
ulimit -n 2048

################################################################################
# Aliases
################################################################################
alias ls='ls -G'      # Don't print group names

if [[ `uname` == Darwin ]]; then
    alias grep='ggrep --color=always'
    alias find=gfind
    alias o=open
else
    alias grep='grep --color=always'
    alias o='n xdg-open'
    y(){
	loc="$(info -w "$1")"
	if grep -q "$1.info" <<<"$loc"; then
	    n yelp "info:$1"
	elif grep -q manpages <<<"$loc"; then
	    n yelp "man:$1"
	else
	    echo "Can't find help for $1"
	fi
    }
fi

alias e='n emacs'
alias v='n vlc'
################################################################################
# Autocompletion, or lack thereof.
################################################################################
# Turn off the default autocompletions as they are too unreliable.
complete -r

# Proper completion for my `n`(nohup) shortcut.
_complete_nohup () {
    # We need to change IFS, otherwise names with spaces will be handled incorrectly.
    # Of course that means that now if a file name has \n in it we're screwed,
    # but what are the chances of that happening, right?
    # RIGHT???
    local IFS=$'\n'

    case "$COMP_CWORD" in
         # The first argument after `n` is a command.
         1) COMPREPLY=($(compgen -c -- "$2"));;
	 # The rest are to be handled normally.
	 *) COMPREPLY=($(compgen -o default -- "$2"));;
    esac
}
complete -F _complete_nohup n

################################################################################

mkcdir () {
    mkdir "$1"
    cd "$1"
}

# r = raw control chars, i = case-insensitive,
# l5 = show 4 lines preceding the search item
export LESS='-rij5'

# Snitch on programs exiting with exit code > 0
trap 'echo -e "\\033[0;33mExit code: $?\\033[0m"' ERR

################################################################################

# Quote arguments
function q() { for f in "${@}" ; do echo $f | sed -E -e 's/\\/\\\\/g' -e 's/(.*)/"\1",/'; done }

# Some kind of hack to make VSCode work with any DPI
alias code='code --ozone-platform-hint=auto --enable-features=WaylandWindowDecorations'

# Set up AG
alias ag="python3 $HOME/derp/ag_code/ag.py -j6"
export AG_ROOT="$HOME/derp/ag"

# Always generate compile commands when using CMake
export CMAKE_EXPORT_COMPILE_COMMANDS=ON