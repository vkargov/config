# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=10000
HISTFILESIZE=20000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

###################
# From old config #
###################
export LESS='-rij5'

#######
# New #
#######

# Set up AG
alias ag='python3 /home/undercat/derp/ag_code/ag.py -j6'
export AG_ROOT=$HOME/derp/ag

alias code='code --ozone-platform-hint=auto --enable-features=WaylandWindowDecorations'

. "$HOME/.cargo/env"

export CMAKE_EXPORT_COMPILE_COMMANDS=TRUE

# Quote arguments
function q() { for f in "${@}" ; do echo -n $f | sed -E -e 's/\\/\\\\/g' -e 's/(.*)/"\1", /'; done; echo; }

# Some kind of hack to make VSCode work with any DPI
alias code='code --ozone-platform-hint=auto --enable-features=WaylandWindowDecorations'

# Set up AG
alias ag='python3 /home/undercat/derp/ag_code/ag.py -j6'
alias ags='python3 /home/undercat/derp/ag_code/ag.py -j6 -p$HOME/derp/ag/{sub,lectures,vimeo,uni} --pr ?sub'
export AG_ROOT=$HOME/derp/ag

# For Chromium builds
export PATH="$PATH:$HOME/derp/depot_tools"

alias c='clear; tmux clear-history'
alias ydl=~/derp/youtube-dl/youtube-dl

export SOONG_GEN_COMPDB=1
export SOONG_GEN_COMPDB_DEBUG=1

function zram {
    dev=/dev/zram0
    case "$1" in
    on|enable)
        if [[ -e /dev/zram0 ]]; then
            echo zram device is already present, should already be on?
            zramctl
            return 1
        fi
        sudo su -c "modprobe zram && sleep 1 && zramctl -a zstd $dev -s 64G && mkswap $dev && swapon -p 5 $dev && swapoff /dev/dm-2"
        ;;
    off|disable)
        sudo su -c "swapoff $dev; rmmod zram"
        ;;
    ''|list)
        zramctl
        echo
        echo Use \'on\' or \'off\' to enable or disable
        ;;
    *)
        echo 'zram on|off'
    esac
}

alias jimmy='docker run --mount type=bind,source=$HOME/derp/docker/ubuntu,target=/jimmy -it ubuntu'

function ww { LD_LIBRARY_PATH="/home/undercat/derp/ROCm/clr/build-debug/hipamd/lib:/opt/rocm/lib" HIP_VISIBLE_DEVICES=0 python3 -m whisper --model small "--device" "cuda" "$@"; }

# IDK why but Chrome broke. works if I force Wayland in the console + set renderer as Vulkan (so presumably it uses AMD drivers)
alias chrome='google-chrome-stable --enable-features=UseOzonePlatform --ozone-platform=wayland'

################################################################################
# Autocompletion, or lack thereof.
################################################################################
# Turn off the default autocompletions as they are too unreliable.
complete -r

# Proper completion for my `n`(nohup) shortcut.
_complete_nohup () {
    # We need to change IFS, otherwise names with spaces will be handled incorrectly.
    # Of course that means that now if a file name has \n in it we're screwed,
    # but what are the chances of that happening, right?
    # RIGHT???
    local IFS=$'\n'

    case "$COMP_CWORD" in
         # The first argument after `n` is a command.
         1) COMPREPLY=($(compgen -c -- "$2"));;
         # The rest are to be handled normally.
         *) COMPREPLY=($(compgen -o default -- "$2"));;
    esac
}
complete -F _complete_nohup n

export LD_LIBRARY_PATH="/opt/rocm/lib:$LD_LIBRARY_PATH"
export PATH="/opt/rocm/bin:$PATH"
# export HIP_VISIBLE_DEVICES=0

export PROMPT_COMMAND='history -a'

export EDITOR=vim
