;; add local dir in front of the list

;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.
(package-initialize)

(setq local-lisp-path "~/.emacs.d/lisp")
(setq load-path (cons local-lisp-path load-path))

;; Scroll by 1 line at a time
(setq scroll-step 1)

(setq comment-style 'extra-line)

;; (set-default-font "-misc-fixed-small-r-normal--15-140-75-75-c-90-koi8-r")
(global-font-lock-mode 1)

(defun prev-window ()
  (interactive)
  (other-window -1))

(transient-mark-mode t)

(setq-default require-final-newline nil)

;; display file name in titlebar
(add-hook 'window-configuration-change-hook
	  (lambda ()
	    (setq frame-title-format
          (concat "emacs ("
 		   (replace-regexp-in-string
		    (concat "/home/" user-login-name) "~"
		    (or buffer-file-name "%b"))
           ")"))))

;; disable svn
(setq vc-handled-backends nil)

;; disable the useless menu bar
(menu-bar-mode -1)

;; disable the useless tool bar
(tool-bar-mode -1)

(setq-default compilation-scroll-output t)

;; disable warning issued by narrow-to-region
(put 'narrow-to-region 'disabled nil)

;; delete all spaces until non-space character if deletion key is hit
;; C-c C-d to enable/disable
;; (setq-default c-hungry-delete-key f)

;; Display function name the cursor is currently in on the status bar.
(setq-default which-func-modes t)

(setq compilation-scroll-output t)

;; Enable column numbering
(column-number-mode t)

;; ;; I want to have access to the xcscope shortcuts from any buffer
;; For some reason it resets emacs to scratch at startup instead of showing the file I specified in command line
;; (add-hook 'find-file-hook (function cscope:hook))

;; toggle full-screen
;; TODO remove it?
(when (eq window-system 'x)
  (defun toggle-fullscreen ()
    (interactive)
    (x-send-client-message nil 0 nil "_NET_WM_STATE" 32
                           '(2 "_NET_WM_STATE_MAXIMIZED_VERT" 0))
    (x-send-client-message nil 0 nil "_NET_WM_STATE" 32
                           '(2 "_NET_WM_STATE_MAXIMIZED_HORZ" 0))
    )
  (toggle-fullscreen)
)

;; F5 = revisit(refresh) file
(defun revert-buffer-no-confirm ()
  "Revert buffer without confirmation."
  (interactive) (revert-buffer t t) (princ "Buffer updated."))
(global-set-key (kbd "<f5>") 'revert-buffer-no-confirm)
;; F7 = compile
(global-set-key (kbd "<f7>") 'compile)
;; ;; F8 = rebuild ctags
;; (defun rebuild-ctags () (interactive) (shell-command "topdir && ctags -Ref \"$TOPDIR\"/TAGS \"$TOPDIR\"/gcc"))
;; (global-set-key (kbd "<f8>") 'rebuild-ctags)

;; Don't ask if I want to reload TAGS
(setq tags-revert-without-query 1)

;; Mouse support for the text mode
(xterm-mouse-mode t)

;; Use uniquify to distinguish between buffers of files bearing the same name easier.
;; Let's see how it goes
(require 'uniquify)
;; (setq uniquify-buffer-name-style 'forward)

;; (require 'color-theme)
;; (color-theme-initialize)
;; (if window-system
;;         (color-theme-subtle-hacker)
;; 	(color-theme-hober))

;; Madness is above, sanity is below
;; Now that I think of it, I should probably try project 1 on all depths, then 2, then 3, etc, defaulting to the current dir if everything else fails
;; And learn ELisp properly, srsly >_>

;; TODO: get rid of all the SETQs!

;; Define the core dir trappings and blacklisted directories here
(setq vk-known-projects '((("gcc" "config" "libgcc" "libiberty") ("/testsuite/" "/test/" "/build/"))
			  (("CODE_OWNERS.TXT" "tools" "utils" "LLVMBuild.txt") ("/test/" "/build/"))
			  (("mono" "mcs" "eglib" "docs" "tools") ("/build.*/"))
			  (("DROD" "DRODLib" "DRODUtil") ())
			  (("arch" "drivers" "include" "kernel") ("/drivers/")) ; Linux
			  (("cmake" "plugins" "panel" "doc") ()) ; Unity
			  (("README.md" "/src/") ("/bin/")) ; generic software project #4 (e.g. CoreCLR)
			  (("README" "binutils" "gas") ()) ; binutils
			  (("README" "INSTALL") ("/.pc/")) ; generic software project #1
			  (("README") ("/.pc/")) ; generic software project #2
			  (("Makefile") ("/.pc/")) ; generic software project #3 (e.g. BSD Grep)
			  (("configure.ac") ()) ; GNU Make
			  ((".git") ()) ; Git
			  ((".svn") ()) ; Subversion
			  (("APPLE_LICENSE") ()) ; oringo
			  ))

(defun vk-index-project () (interactive)
       (defun vk-dump-vars-to-file (varlist filename)
	 "simplistic dumping of variables in VARLIST to a file FILENAME"
	 (save-excursion
	   (let ((buf (find-file-noselect filename)))
	     (set-buffer buf)
	     (erase-buffer)
	     (loop for var in varlist do
		   (princ (concat var "\n") buf))
	     (save-buffer)
	     (kill-buffer))))
       
       (defun vk-lookup-project (projects)
	 (catch 'project-found
	   (while (consp projects)
	     (let* ((project (pop projects))
		    (blacklist (cadr project))		    
		    (lookup-path buffer-file-name)
		    (lookup-failed nil))
	       ;;(message "Trying project %s" project) ; debug
	       (while (> (string-width lookup-path) 1)
		 (catch 'try-parent-dir		   
		   (let* ((remaining-trappings (car project)))
		     ;;(message "Trappings are: %s" remaining-trappings) ; debug
		     ;; For some reason (file-exists-p "main.c/.") = t!
		     (setq lookup-path (replace-regexp-in-string "/[^/]*$" "" lookup-path))
		     ;;(message "Trying path %s" lookup-path) ; debug
		     (while (consp remaining-trappings)
		       (when (not (file-exists-p (concat lookup-path "/" (pop remaining-trappings))))
			 ;;(message "try-parent-dir") ; debug
			 (throw 'try-parent-dir nil))
		       )
		     ;;(message "project-found") ; debug
		     (throw 'project-found (list lookup-path blacklist))
		     )))))
	     (list nil nil)))

       (let* ((project-info (vk-lookup-project vk-known-projects))
	      (project-root nil)
	      (files '())
	      (project-root (car project-info))
	      (project-blacklist (cadr project-info))	     
	      )
	 
	 (message "Project found at %s. Scanning files... (excluding %s)" project-root project-blacklist)

	 (when project-root
	   (defun vk-is-path-blacklisted (path blacklist)
	     ;;(message "vk-is-path-blacklisted %s %s" path blacklist) ; debug
	     (while (and blacklist (not (string-match (car blacklist) path))) (pop blacklist))
	     (if blacklist t nil))

	   (defun vk-build-cscope-database (root blacklist)
	     (let ((dirs (list root)))
	       (while dirs
		 (let* (
			(dir (pop dirs))
			(ls (directory-files dir))
			)
		   (while ls
		     (let* ((file (pop ls))
			    (file-path (concat dir "/" file)))
		       (unless (vk-is-path-blacklisted file-path blacklist)
			 (if (file-accessible-directory-p file-path)
			     (unless (or (string= file ".") (string= file "..")) (add-to-list 'dirs file-path))
			   (if (and (file-readable-p file-path) (string-match "\\.\\(c\\|cpp\\|h\\|hpp\\|vala\\|def\\)$" file-path))
			       (add-to-list 'files file-path))))))))
	       ;; Append some commonly used header files. Uncomment the "/usr/include" line above
	       ;; and remove/comment this one if you want to see them all their multitude instead
	       ;; of this selectivity.
	       (dolist (header '("stdio.h" "stdlib.h" "stdarg.h" "ctype.h" "string.h" "math.h" "dlfcn.h"
				 "sys/types.h" "sys/time.h" "unistd.h" "assert.h" "limits.h" "poll.h"
				 "libgen.h" "signal.h" "fcntl.h"
				 "bits/stdio2.h" "bits/string2.h"
				 "secure/_string.h" "secure/_stdio.h" "secure/_common.h" ; Clang's "real" headers
				 "X11/Xos.h" "X11/Xlib.h" "X11/Xfuncproto.h" "X11/Xatom.h" "X11/Xproto.h"
				 "X11/extensions/Xrandr.h" "X11/extensions/shape.h" "X11/cursorfont.h"
				 "X11/extensions/XInput2.h" "X11/X.h"
				 "boost/bind.hpp" "boost/foreach.hpp"
				 "sys/wait.h" "sys/types.h" "sys/stat.h"
				 "glib-2.0/glib/gspawn.h" "glib-2.0/glib/gslice.h" "glib-2.0/glib/gmacros.h"
				 "glib-2.0/gobject/gobject.h" "glib-2.0/gobject/gtype.h"
				 ))
		 (let ((header_path (concat "/usr/include/" header)))
		   (if (file-exists-p header_path) (add-to-list 'files header_path)))
		 )
	       files))

	   (vk-dump-vars-to-file (vk-build-cscope-database project-root project-blacklist)
			      (concat project-root "/" cscope-index-file))

	   (message "Processing...")
	   (cscope-set-initial-directory project-root)
	   (with-temp-buffer (shell-command (concat "cd " project-root "; cscope -b; ctags -eL " cscope-index-file) t)) ; with-temp-buffer is needed to hide output
	   (setq tags-file-name (concat project-root "/TAGS"))
	   (message "Done processing")
	   ;; Set compilation-directory also, so the compile function would pick up the root as well.
	   (setq compilation-directory project-root)
	   )
	 )
       )

(global-set-key (kbd "<f9>") 'vk-index-project)

;; Todo: identification of project by its topdir, making global variables local with let, speedup

;; Load cscharpmode
(autoload 'csharp-mode "csharp-mode" "Major mode for editing C# code." t)
(setq auto-mode-alist
      (append '(("\\.cs$" . csharp-mode)) auto-mode-alist))

;; Load markdown-mode
(autoload 'markdown-mode "markdown-mode"
   "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

;; Enable cscope support
;; Modified cscope from the local lisp directory should take the priority
(require 'xcscope)

; Not needed on linux, needed on os x... looks like some init file is missing?
; Also see update-file-autoloads Emacs manual and ;;;###autoload in xcscope.el.
(cscope-setup)

(setq backup-directory-alist '(("." . "~/.emacs.d/backup")))

;; Copy stuff to clipboard
(setq x-select-enable-clipboard t)

;; Empty scratch message
(setq initial-scratch-message nil)

;; Mono coding guideline things. Should be activated when pressing F9 along with 
;; Use tabs (and configure your IDE to show a size of 8 spaces for them) for writing your code (hopefully we can keep this consistent).
(setq-default c-basic-offset 8)

;; More convenient navigation through buffers
;; TODO dunno what the difference between other-window(C-x o) and next-multiframe-window is...
(global-set-key (kbd "M-]") 'next-multiframe-window)
(global-set-key (kbd "M-[") 'previous-multiframe-window)

;; Use multi-term.el. It's a nicer term mode. Unstable from my early impressions, so not sure I can really utilize it...
(require 'multi-term)

;; M-n copies full file name (was undefined)
(global-set-key (kbd "M-n") (lambda () (interactive) (kill-new (buffer-file-name))))

;; If you launch emacs from Spotlight, it doesn't recognise local...
;; This seems like a better https://stackoverflow.com/questions/135688/setting-environment-variables-in-os-x
;; I don't think this line is needed. ==v
(setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
;;(setq exec-path (append exec-path '("/usr")))


;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Highlight shenenigans ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require 'hi-lock) ; reusing their faces
(defun vk-remove-overlays-in-region (beginning end) (interactive) (remove-overlays beginning end))
(defun vk-highlight-selection (face)
  (let*
      ((beginning (if (use-region-p) (region-beginning) (line-beginning-position)))
       (end (if (use-region-p) (region-end) (line-end-position))))
    (vk-remove-overlays-in-region beginning end)
    (if face (overlay-put (make-overlay beginning end) 'face face))
    )
  )
;; on Mac "s" is "alt" (after all my rebindings)
(global-set-key (kbd "s-1") (lambda () (interactive) (vk-highlight-selection 'hi-yellow)))
(global-set-key (kbd "s-2") (lambda () (interactive) (vk-highlight-selection 'hi-pink)))
(global-set-key (kbd "s-3") (lambda () (interactive) (vk-highlight-selection 'hi-green)))
(global-set-key (kbd "s-4") (lambda () (interactive) (vk-highlight-selection 'hi-blue)))
(global-set-key (kbd "s-5") (lambda () (interactive) (vk-highlight-selection 'hi-blue-b)))
(global-set-key (kbd "s-6") (lambda () (interactive) (vk-highlight-selection 'hi-green-b)))
(global-set-key (kbd "s-7") (lambda () (interactive) (vk-highlight-selection 'hi-red-b)))
(global-set-key (kbd "s-0") (lambda () (interactive) (vk-highlight-selection nil)))
; Prooooobably gonna break hi-lock, but oh well

;; set-goal-column (C-x C-n) sets default column for ⬆/⬇
(put 'set-goal-column 'disabled nil)

;; Fix newlines + draw dotty file with an external program
(defun vk-draw-flowchart ()
  (interactive)
  (let ((filename (buffer-file-name)))
    (if (string= (file-name-extension filename) "dot")
	(progn
	  (save-buffer)
	  
	  (start-process "dotty" nil "zgrviewer" filename)
	  )
      (message (concat "File " filename " is not a flowchart"))
      )
    )
  )
(global-set-key (kbd "<f12>") 'vk-draw-flowchart)
				
;; Enable the Git version control thing. Or at least try to.
;; (add-to-list 'vc-handled-backends 'Git)
;; PS Is it really needed?

;; Auto-generated custom stuff goes at the end
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-enabled-themes (quote (whiteboard)))
 '(frame-background-mode (quote light))
 '(inhibit-startup-screen t)
 '(package-selected-packages (quote (helm)))
 '(safe-local-variable-values (quote ((eval c-set-offset (quote innamespace) 0)))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;; Show line numbers in reasonably large files
(setq line-number-display-limit-width 2000000)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Better completion mode

;; Documentation: https://www.gnu.org/software/emacs/manual/html_mono/ido.html
(require 'ido)
(ido-mode t)
;; Don't open the buffer automatically when hitting tab.
;; One keystroke less, 10e11 activated neurons more trying to figure out whether I should press "enter" or not every time I switch buffers.
(setq ido-confirm-unique-completion t)
;; By default pressing backspace at the end of the line in IDO mode removes the whole directory/file name till the last slash. Not a fan.
;; TODO okay, this isn't working for some reason. I don't know why, but ARGHHH.
(define-key ido-file-dir-completion-map [backspace] nil)
(define-key ido-file-dir-completion-map "\d" nil)

;; ;; Helm
;; way too much computer in it...
;; ;; Repo from which Helm is available
;; (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
;; ;; https://github.com/emacs-helm/helm/wiki#install
;; (helm-mode t)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Enable the ability to undo/redo window configuration changes with C-<left>/<right>
;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Window-Convenience.html
(setq winner-mode t)
